#include"ModelObject.h"
#include"CreateBuffer.h"
#include"FbxLoader.h"
#include"DirectionalLight.h"
#include"Matrix.h"
#include"CollisionType.h"
#include"LibMath.h"

using namespace MelLib;

std::unordered_map<std::string, std::unique_ptr<ModelObject>>ModelObject::pModelObjects;


ID3D12Device* ModelObject::device;
std::vector<ID3D12GraphicsCommandList*>ModelObject::cmdLists;
ComPtr<ID3D12RootSignature> ModelObject::rootSignature;

ModelObject::ModelObject(ModelData* pModelData, ConstBufferData* userConstBufferData)
{
	Create(pModelData, userConstBufferData);
}

void ModelObject::CreateConstBuffer()
{
	ConstBufferData::BufferType modelConstBufferType = modelConstBufferData.bufferType;
	ConstBufferData::BufferType userConstBufferType = userConstBufferData.bufferType;

#pragma region リサイズ

	constBuffer.resize(modelFileObjectNum);


	if (modelConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
	{
		modelConstBuffer.resize(1);
	}
	else if (modelConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
	{
		modelConstBuffer.resize(modelFileObjectNum);
	}


	if (userConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
	{
		userConstBuffer.resize(1);
	}
	else if (userConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
	{
		userConstBuffer.resize(modelFileObjectNum);
	}

#pragma endregion


	auto CreateBuffer = [&]
	(
		ID3D12Resource** pBuffer,
		const size_t& dataSize
		)
	{
		CreateBuffer::GetInstance()->CreateConstBuffer
		(
			CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),
			dataSize,
			pBuffer
		);
	};


	//モデル
	if (modelConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
	{
		CreateBuffer
		(
			&modelConstBuffer[0],
			modelConstBufferData.bufferDataSize
		);
	}

	//ユーザー
	if (userConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
	{
		CreateBuffer
		(
			&userConstBuffer[0],
			userConstBufferData.bufferDataSize
		);
	}

	//モデル内のオブジェクト分ループ
	for (int i = 0; i < modelFileObjectNum; i++)
	{
#pragma region 生成


		//メイン
		CreateBuffer
		(
			&constBuffer[i],
			sizeof(ModelConstBufferData)
		);


		//モデル
		if (modelConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
		{
			CreateBuffer
			(
				&modelConstBuffer[i],
				modelConstBufferData.bufferDataSize
			);
		}

		//ユーザー
		if (userConstBufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
		{
			CreateBuffer
			(
				&userConstBuffer[i],
				userConstBufferData.bufferDataSize
			);
		}
#pragma endregion

#pragma region 初期化

		ModelConstBufferData* constBufferData;
		constBuffer[i]->Map(0, nullptr, (void**)&constBufferData);
		
		//ライト
		for (int j = 0, size = DirectionalLight::LIGTH_MAX; j < size; j++)
		{
			constBufferData->light[j] = DirectX::XMFLOAT4(0, 0, 0, 0);
			constBufferData->lightColor[j] = DirectX::XMFLOAT4(0, 0, 0, 0);
		}
		
		constBuffer[i]->Unmap(0, nullptr);
#pragma endregion
	}


}

void ModelObject::DrawCommonProcessing(const std::string& rtName)
{
	if (!pModelData)return;
	MapConstData(RenderTarget::Get(rtName)->GetCamera());
	SetCmdList();
}

void ModelObject::MapConstData(const Camera* camera)
{
	ModelConstBufferData* constBufferData;

	for (int i = 0; i < modelFileObjectNum; i++)
	{
#pragma region 基本的な情報のマップ

		constBuffer[i]->Map(0, nullptr, (void**)&constBufferData);
		constBufferData->addColor = modelConstDatas[i].addColor;
		constBufferData->subColor = modelConstDatas[i].subColor;
		constBufferData->mulColor = modelConstDatas[i].mulColor;
		constBufferData->ex = modelConstDatas[i].pushPolygonNum;

		std::vector<DirectionalLight*> pLights = DirectionalLight::GetAll();
		for (int i = 0, size = pLights.size(); i < size; i++) 
		{
			Vector3 lightDir = pLights[i]->GetDirection();
			constBufferData->light[i] = DirectX::XMFLOAT4(lightDir.x, lightDir.y, lightDir.z, 0);
			Color lightCor = pLights[i]->GetColor();
			constBufferData->lightColor[i] = DirectX::XMFLOAT4
			(
				(float)lightCor.r / 255.0f,
				(float)lightCor.g / 255.0f,
				(float)lightCor.b / 255.0f,
				(float)lightCor.a / 255.0f
			);


		}

		Vector3 cameraPos = camera->GetCameraPosition();
		constBufferData->cameraPos = DirectX::XMFLOAT4(cameraPos.x, cameraPos.y, cameraPos.z, 0);

#pragma region 行列計算
		DirectX::XMMATRIX matWorld = DirectX::XMMatrixIdentity();

		matWorld *= DirectX::XMMatrixScaling
		(
			modelConstDatas[i].scale.x,
			modelConstDatas[i].scale.y,
			modelConstDatas[i].scale.z
		);
		matWorld *= DirectX::XMMatrixRotationZ(DirectX::XMConvertToRadians(modelConstDatas[i].angle.z));
		matWorld *= DirectX::XMMatrixRotationX(DirectX::XMConvertToRadians(modelConstDatas[i].angle.x));
		matWorld *= DirectX::XMMatrixRotationY(DirectX::XMConvertToRadians(modelConstDatas[i].angle.y));

		constBufferData->normalMat = matWorld;

		matWorld *= DirectX::XMMatrixTranslation
		(
			modelConstDatas[i].position.x,
			modelConstDatas[i].position.y,
			modelConstDatas[i].position.z
		);


		constBufferData->mat = matWorld * camera->GetViewAndProjectionMat();
		constBufferData->worldMat = matWorld;

#pragma endregion


#pragma region レンダリング方向
		//上下左右前後
		std::array<float, 6>dirPos = pModelData->GetDirectionMaxPosition()[i];

		//仮に前から奧
		constBufferData->tex3DStart = dirPos[4];
		constBufferData->tex3DEnd = dirPos[5];
#pragma endregion


		constBuffer[i]->Unmap(0, nullptr);

#pragma endregion

#pragma region ボーンのマップ

		int boneNum = pModelData->GetBoneNumber();

		if (boneNum == 0
			|| pModelData->GetModelFormat() != ModelData::ModelFormat::MODEL_FORMAT_OBJ
			&& i != 0)return;

		SkinConstBufferData* skinConstData;

		modelConstBuffer[i]->Map(0, nullptr, (void**)&skinConstData);

		if (pModelData->GetModelFormat() == ModelData::ModelFormat::MODEL_FORMAT_OBJ)
		{
			std::vector<Vector3>objBonePositions = pModelData->GetObjBonePosition();

			DirectX::XMMATRIX boneMat = DirectX::XMMatrixIdentity();
			DirectX::XMFLOAT3 boneScale;
			DirectX::XMFLOAT3 boneAngle;
			DirectX::XMFLOAT3 boneMoveVector;

			//親ボーンの行列乗算
			int parentBoneNum = 0;
			int bone = 0;

			DirectX::XMFLOAT3 bonePos = { 0,0,0 };


			for (UINT j = 0; j < boneNum; j++)
			{
				boneMat = DirectX::XMMatrixIdentity();

				//ボーンから頂点の距離分移動
				bonePos = objBonePositions[j].ToXMFLOAT3();
				boneMat *= DirectX::XMMatrixTranslation(-bonePos.x, -bonePos.y, -bonePos.z);

				boneScale = boneDatas[j].scale;
				boneMat *= DirectX::XMMatrixScaling(boneScale.x, boneScale.y, boneScale.z);

				boneAngle = boneDatas[j].angle;
				boneMat *= DirectX::XMMatrixRotationZ(DirectX::XMConvertToRadians(boneAngle.z));
				boneMat *= DirectX::XMMatrixRotationX(DirectX::XMConvertToRadians(boneAngle.x));
				boneMat *= DirectX::XMMatrixRotationY(DirectX::XMConvertToRadians(boneAngle.y));

				boneMoveVector = boneDatas[j].moveVector;

				//モデル自体のスケールの乗算により、ボーンの平行移動の値にスケールが乗算されるため、
				//割って増減を抑えている
				//ボーン→行列の順番で掛けるからモデルの倍率が影響しちゃう
				boneMat *= DirectX::XMMatrixTranslation
				(
					boneMoveVector.x / modelConstDatas[i].scale.x,
					boneMoveVector.y / modelConstDatas[i].scale.y,
					boneMoveVector.z / modelConstDatas[i].scale.z
				);

				//回転させたら戻す
				boneMat *= DirectX::XMMatrixTranslation(bonePos.x, bonePos.y, bonePos.z);

#pragma region 親の処理


				DirectX::XMFLOAT3 boneAngleImpact = { 0.0f,0.0f,0.0f };
				DirectX::XMFLOAT3 boneScaleImpact = { 1.0f,1.0f,1.0f };
				DirectX::XMFLOAT3 boneMoveVectorImpact = { 0.0f,0.0f,0.0f };
				boneAngleImpact = parentBoneDatas[j].angleImpact;
				boneScaleImpact = parentBoneDatas[j].scaleImpact;
				boneMoveVectorImpact = parentBoneDatas[j].moveVectorImpact;

				//親のボーン番号代入
				parentBoneNum = parentBoneDatas[j].parentBoneNum;

				//これを使って影響度とか加算してく
				//子　→　親の順で入れる
				std::vector<int>parentNums;
				parentNums.reserve(50);

				//こちらは親　→　子
				std::vector<DirectX::XMMATRIX>parentMat;
				parentMat.reserve(50);


				//先にすべての親を取得&影響度取得
				while (1)
				{
					//-1だったら(親がセットされてなかったら)抜ける
					if (parentBoneNum == -1)break;
					parentNums.push_back(parentBoneNum);

					//親のボーン番号代入
					parentBoneNum = parentBoneDatas[parentBoneNum].parentBoneNum;

				}
				if (parentNums.size() != 0)
				{

					DirectX::XMMATRIX mulMat = DirectX::XMMatrixIdentity();

					//親数
					const int maxParentSize = static_cast<int>(parentNums.size());

					DirectX::XMFLOAT3 pAngle = { 0,0,0 };
					DirectX::XMFLOAT3 pScale = { 1,1,1 };
					DirectX::XMFLOAT3 pMoveVector = { 0,0,0 };
					DirectX::XMFLOAT3 pPos = { 0,0,0 };

					DirectX::XMFLOAT3 pAngleImpact = { 1,1,1 };
					DirectX::XMFLOAT3 pScaleImpact = { 1,1,1 };
					DirectX::XMFLOAT3 pMoveVectorImpact = { 1,1,1 };

					mulMat = DirectX::XMMatrixIdentity();

					//最後にある親のボーンを基準に回すので、入れる
					pPos.x = objBonePositions[parentNums[maxParentSize - 1]].x;
					pPos.y = objBonePositions[parentNums[maxParentSize - 1]].y;
					pPos.z = objBonePositions[parentNums[maxParentSize - 1]].z;

					int impactIndex = j;
					for (auto& pNum : parentNums)
					{
						pAngle.x += boneDatas[pNum].angle.x;
						pAngle.y += boneDatas[pNum].angle.y;
						pAngle.z += boneDatas[pNum].angle.z;

						pScale.x *= boneDatas[pNum].scale.x;
						pScale.y *= boneDatas[pNum].scale.y;
						pScale.z *= boneDatas[pNum].scale.z;

						pMoveVector.x += boneDatas[pNum].moveVector.x;
						pMoveVector.y += boneDatas[pNum].moveVector.y;
						pMoveVector.z += boneDatas[pNum].moveVector.z;



						pAngleImpact.x *= parentBoneDatas[impactIndex].angleImpact.x;
						pAngleImpact.y *= parentBoneDatas[impactIndex].angleImpact.y;
						pAngleImpact.z *= parentBoneDatas[impactIndex].angleImpact.z;
						pScaleImpact.x *= parentBoneDatas[impactIndex].scaleImpact.x;
						pScaleImpact.y *= parentBoneDatas[impactIndex].scaleImpact.y;
						pScaleImpact.z *= parentBoneDatas[impactIndex].scaleImpact.z;
						pMoveVectorImpact.x *= parentBoneDatas[impactIndex].moveVectorImpact.x;
						pMoveVectorImpact.y *= parentBoneDatas[impactIndex].moveVectorImpact.y;
						pMoveVectorImpact.z *= parentBoneDatas[impactIndex].moveVectorImpact.z;

						impactIndex = pNum;
					}

					pAngle.x *= pAngleImpact.x;
					pAngle.y *= pAngleImpact.y;
					pAngle.z *= pAngleImpact.z;

					pScale.x *= pScaleImpact.x;
					pScale.y *= pScaleImpact.y;
					pScale.z *= pScaleImpact.z;

					pMoveVector.x *= pMoveVectorImpact.x;
					pMoveVector.y *= pMoveVectorImpact.y;
					pMoveVector.z *= pMoveVectorImpact.z;


					//ボーンから頂点の距離分移動
					mulMat *= DirectX::XMMatrixTranslation(-pPos.x, -pPos.y, -pPos.z);

					mulMat *= DirectX::XMMatrixScaling(pScale.x, pScale.y, pScale.z);

					mulMat *= DirectX::XMMatrixRotationZ(DirectX::XMConvertToRadians(pAngle.z));
					mulMat *= DirectX::XMMatrixRotationX(DirectX::XMConvertToRadians(pAngle.x));
					mulMat *= DirectX::XMMatrixRotationY(DirectX::XMConvertToRadians(pAngle.y));


					//親はまとめて掛けているので、モデルと自分の拡縮だけ掛ければいい
					//modelConstDatas[i][0].scale に boneScale掛ける必要あるか要確認
					mulMat *= DirectX::XMMatrixTranslation
					(
						pMoveVector.x / (modelConstDatas[i].scale.x * boneScale.x),
						pMoveVector.y / (modelConstDatas[i].scale.y * boneScale.y),
						pMoveVector.z / (modelConstDatas[i].scale.z * boneScale.z)
					);

					//回転させたら戻す
					mulMat *= DirectX::XMMatrixTranslation(pPos.x, pPos.y, pPos.z);


					boneMat *= mulMat;
				}
#pragma endregion

				skinConstData->bones[j + 1] = boneMat;

			}


		}
		else if (pModelData->GetModelFormat() == ModelData::ModelFormat::MODEL_FORMAT_FBX)
		{

			std::vector<ModelData::FbxBone> bones = pModelData->GetFbxBone();

			for (int i = 0; i < boneNum; i++)
			{
				//変換
				DirectX::XMMATRIX matCurrentPose;
				FbxAMatrix fbxCurrentPose =
					bones[i].fbxCluster->GetLink()->EvaluateGlobalTransform(fbxAnimationData.currentTime);
				FbxLoader::GetInstance()->ConvertMatrixFromFbx(&matCurrentPose, fbxCurrentPose);

				//乗算
				skinConstData->bones[i] = bones[i].invInitialPose * matCurrentPose;

			}
		}

		modelConstBuffer[i]->Unmap(0, nullptr);
#pragma endregion

	}


}

void ModelObject::SetCmdList()
{

	cmdLists[0]->SetGraphicsRootSignature(rootSignature.Get());
	cmdLists[0]->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST);



	//モデル特有バッファセット
	if (modelConstBufferData.bufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
		cmdLists[0]->SetGraphicsRootConstantBufferView(MODEL_BUFFER_REGISTER, modelConstBuffer[0]->GetGPUVirtualAddress());

	//ユーザーモデルバッファセット
	if (userConstBufferData.bufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL)
		cmdLists[0]->SetGraphicsRootConstantBufferView(MODEL_BUFFER_REGISTER, userConstBuffer[0]->GetGPUVirtualAddress());



	const std::vector<VertexBufferSet>& vertexBufferSets = pModelData->GetVertexBufferSet();
	const std::vector<IndexBufferSet>& indexBufferSets = pModelData->GetIndexBufferSet();


	//モデルのオブジェクトごとをセット
	//頂点バッファ分ループ
	for (int i = 0; i < modelFileObjectNum; i++)
	{
		//cmdLists[0]->SetPipelineState(pPipeline[i]->GetPipelineState().Get());
		cmdLists[0]->SetPipelineState(materials[i]->GetPPipelineState()->GetPipelineState().Get());


		cmdLists[0]->IASetVertexBuffers(0, 1, &vertexBufferSets[i].vertexBufferView);
		cmdLists[0]->IASetIndexBuffer(&indexBufferSets[i].indexBufferView);

#pragma region テクスチャ

		ID3D12DescriptorHeap* textureDescHeap = materials[i]->GetPTextureHeap();
		std::vector<ID3D12DescriptorHeap*> ppHeaps;
		ppHeaps.push_back(textureDescHeap);
		cmdLists[0]->SetDescriptorHeaps(1, &ppHeaps[0]);


		D3D12_GPU_DESCRIPTOR_HANDLE gpuDescHandle = CD3DX12_GPU_DESCRIPTOR_HANDLE
		(
			materials[i]->GetPTextureHeap()->GetGPUDescriptorHandleForHeapStart(),
			i,
			device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV)
		);
		cmdLists[0]->SetGraphicsRootDescriptorTable(TEXURE_ROOTPARAM_NUM, gpuDescHandle);
#pragma endregion

#pragma region 定数



		//定数バッファ
		cmdLists[0]->SetGraphicsRootConstantBufferView(CONST_BUFFER_REGISTER, constBuffer[i]->GetGPUVirtualAddress());

		//マテリアルバッファ
		cmdLists[0]->SetGraphicsRootConstantBufferView
		(MATERIAL_BUFFER_REGISTER, materials[i]->GetPConstBuffer(Material::MaterialConstBufferType::MATERIAL_DATA)->GetGPUVirtualAddress());

		//Colorマテリアル
		cmdLists[0]->SetGraphicsRootConstantBufferView
		(COLOR_MATERIAL_BUFFER_REGISTER, materials[i]->GetPConstBuffer(Material::MaterialConstBufferType::COLOR)->GetGPUVirtualAddress());

		//モデルバッファ
		if (modelConstBufferData.bufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
			cmdLists[0]->SetGraphicsRootConstantBufferView(MODEL_BUFFER_REGISTER, modelConstBuffer[i]->GetGPUVirtualAddress());

		//ユーザー定数バッファ
		if (userConstBufferData.bufferType == ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT)
			cmdLists[0]->SetGraphicsRootConstantBufferView(MODEL_BUFFER_REGISTER, userConstBuffer[i]->GetGPUVirtualAddress());


#pragma endregion


		//描画
		cmdLists[0]->DrawIndexedInstanced(static_cast<UINT>(pModelData->GetIndices()[i].size()), 1, 0, 0, 0);

	}

}

void ModelObject::Draw(const std::string& rtName)
{
	RenderTarget::ChangeCurrentRenderTarget(RenderTarget::Get(rtName));

	FbxAnimation();

	DrawCommonProcessing(rtName);
}

void MelLib::ModelObject::MeshCat()
{
	//緊急(解決優先度高めの現在の問題点)
	//1.そもそも四角形でも斬り方によっては5角形になるので、どっちみち面の再形成は必要
	//やり方は、斬られた辺の自分側(反対側じゃない方)の頂点と衝突点で多角形の三角形化を行う
	//斬られた辺に関わる部分だけ行えばよい

	//やること
	//1.当たった辺だけじゃなく、全頂点に対して表裏判定を行う。
	//(反対側の頂点をすべて消さないといけないため)
	
	//2.断面に使用する衝突点と入れ替える頂点かどうかの判断。
	//使うか使わないかだけわかればいい。
	//やり方は、ポートフォリオに書いてある
	//判断できたら、配列の何番目かとかの数値を取得しといて、断面の形成時に取得してインデックスとして使えるようにしとく
	//正直入れ替えずに消し飛ばして、後から追加してもいい

	//3.消し飛ばしたら、頂点だけではなくインデックスも変更する。
	//反対側の頂点が関係してるインデックスのセット(三角形を形成する添え字3つ)を消し飛ばす。
	//平面をまたいでる部分は消しちゃダメ。

	//現在の問題点
	//1.断面を形成するのに使う頂点とそうじゃない頂点があるが、断面を形成するのに使う頂点をどう取り出すか。
	//法線を元の頂点のやつを使いまわそうと思ったが、断面のように面を形成してない可能性があるので無理だった。
	//(四角形は断面と同じインデックスの面が元からあるからできる)
	//そもそも断面のように面を形成してない場合は、その頂点を追加しないといけない
	//そもそも切断してなくなる頂点を入れ替えずに消す?
	//結局断面を形成するのに使うか使わないかを判断しないといけない。
	//結局三角形を斬るときと同じように元からある面を形成しなおさないといけない?

	//2,斬った時に3つ以上分かれる場合はどうするか(wの真ん中斬った時など5個に分かれる)


	//思いついたこと
	//1.3角形も斬った時に面が消えるから、入れ替えればできる?
	//結局四角形に変えないといけないから無理。
	//多角形を三角形の集合体にするやつで面を形成しなおせばできる?

	//この処理はBoxとBoardで行う

	//とりあえず当たり判定処理をすっ飛ばして、
	//インデックスのセットと断面の描画を行う(断面用のテクスチャは割り当てない)

	//平面情報
	PlaneData plane;
	plane.SetDistance(0.0f);
	plane.SetNormal(Vector3(1.0f, 0, 0));

#pragma region 旧

	////スケール
	//Vector3 scale = modelConstDatas[0].scale;

	////仮実装用の衝突点。中心をぶった切ることを仮定
	//std::vector<Vector3>hitPoints =
	//{
	//	Vector3(0,0.5f,0.5f) * scale,
	//	Vector3(0,0.5f,-0.5f)* scale,
	//	Vector3(0,-0.5f,0.5f)* scale,
	//	Vector3(0,-0.5f,-0.5f)* scale
	//};

	////衝突した辺
	//std::vector<Value2<Vector3>> hitLine =
	//{
	//	Value2<Vector3>(Vector3(-0.5f, 0.5f, 0.5f) * scale,Vector3(0.5f, 0.5f, 0.5f) * scale),
	//	Value2<Vector3>(Vector3(-0.5f, 0.5f,-0.5f) * scale,Vector3(0.5f, 0.5f,-0.5f) * scale),
	//	Value2<Vector3>(Vector3(-0.5f,-0.5f, 0.5f) * scale,Vector3(0.5f,-0.5f, 0.5f) * scale),
	//	Value2<Vector3>(Vector3(-0.5f,-0.5f,-0.5f) * scale,Vector3(0.5f,-0.5f,-0.5f) * scale),
	//};

	////四角形の頂点とインデックス取得
	//std::vector<Vector3>modelVertices = pModelData->GetVerticesPosition()[0];
	//for (auto& v : modelVertices)v *= scale;
	//
	//std::vector<USHORT>modelIndices = pModelData->GetIndices()[0];
	//
	////分割後の結果格納用配列
	//std::vector<Vector3>modelVerticesFront = modelVertices;
	//
	//std::vector<Vector3>modelVerticesBack = modelVertices;

	////テスト
	//float f = Vector3::Dot(hitLine[0].v1, 0);


	////分離(モデルを2つに分ける処理)
	//
	////当たった辺の左右判定
	//std::vector<Value2<char>> hitLineResult =
	//{
	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[0].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[0].v2,plane)),

	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[1].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[1].v2,plane)),

	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[2].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[2].v2,plane)),

	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[3].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[3].v2,plane)),
	//};

	////頂点を左右で分ける
	//size_t hitLineNum = hitLine.size();
	//
	////頂点を衝突点に
	////表
	//for(auto& v : modelVerticesFront)
	//{
	//	for(int i = 0; i < hitLineNum;i++)
	//	{
	//		//辺と同じ頂点かつ、頂点が裏側だったら入る
	//		if(v == hitLine[i].v1
	//			&& hitLineResult[i].v1 == -1)
	//		{
	//			//裏側の頂点を衝突点と入れ替え
	//			v = hitPoints[i];
	//		}
	//		else if (v == hitLine[i].v2
	//			&& hitLineResult[i].v2 == -1)
	//		{
	//			v = hitPoints[i];
	//		}


	//		
	//	}
	//}

	////裏
	//for (auto& v : modelVerticesBack)
	//{
	//	for (int i = 0; i < hitLineNum; i++)
	//	{
	//		//辺と同じ頂点かつ、頂点が表側だったら入る
	//		if (v == hitLine[i].v1
	//			&& hitLineResult[i].v1 == 1)
	//		{
	//			//表側の頂点を衝突点と入れ替え
	//			v = hitPoints[i];
	//		}
	//		else if (v == hitLine[i].v2
	//			&& hitLineResult[i].v2 == 1)
	//		{
	//			v = hitPoints[i];
	//		}
	//	}
	//}

	////面を生成
	//
	////やり方
	////一番遠い頂点と、2、3番目に遠いまたは、一番遠い頂点に1番、2番目に近い頂点を使って面を生成。
	////法線を計算して、-があったら、関数に渡す順番を入れ替えて計算。
	////それを繰り返す。
	////一番遠い頂点を取り除いていく。それ以外は取り除かない
	//

	////まず、衝突点を原点から近い順に並び替える。
	////先頭に一番遠いのを持ってくると消した時に並び替えが発生しまくるので、近い順
	//hitPoints = Vector3::Sort(hitPoints, 0, SortType::ASCENDING);

	////断面のインデックス
	//std::vector<USHORT>frontIndices;
	//std::vector<USHORT>backIndices;

	//while(1)
	//{
	//	size_t size = hitPoints.size();
	//	//三角形の面を形成
	//	Value3<Vector3>tri = 
	//		Value3<Vector3>(hitPoints[size - 1], hitPoints[size - 2], hitPoints[size - 3]);

	//	Vector3 normal = LibMath::CalcNormal(tri.v1, tri.v2, tri.v3);
	//	if(normal.x < 0 || normal.y < 0|| normal.z < 0)
	//	{
	//		//frontIndices.push_back()
	//	}
	//}

#pragma endregion

#pragma region 2

	//立体だと多角形の分割じゃ無理かも

	////スケール
	//Vector3 scale = modelConstDatas[0].scale;

	////仮実装用の衝突点。中心をぶった切ることを仮定
	//std::vector<Vector3>hitPoints =
	//{
	//	Vector3(0,0.5f,0) * scale,
	//	Vector3(0,-0.5f,0) * scale
	//};

	////衝突した辺
	//std::vector<Value2<Vector3>> hitLine =
	//{
	//	Value2<Vector3>(Vector3(-0.5f, 0.5f, 0) * scale,Vector3(0.5f, 0.5f, 0) * scale),
	//	Value2<Vector3>(Vector3(-0.5f, -0.5f,0) * scale,Vector3(0.5f, -0.5f,0) * scale)
	//};

	////当たった辺の左右判定(辺を平面を基準に分ける)
	//std::vector<Value2<char>> hitLineResult =
	//{
	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[0].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[0].v2,plane)),

	//	Value2<char>
	//	(LibMath::PointPlaneFrontBackCheck(hitLine[1].v1,plane),LibMath::PointPlaneFrontBackCheck(hitLine[1].v2,plane))
	//};


	////表裏で分ける
	//std::vector<Vector3>frontPos = hitPoints;
	//std::vector<Vector3>backPos = hitPoints;

	//if (hitLineResult[0].v1 == 1)frontPos.push_back(hitLine[0].v1);
	//else backPos.push_back(hitLine[0].v1);
	//if (hitLineResult[0].v2 == 1)frontPos.push_back(hitLine[0].v2);
	//else backPos.push_back(hitLine[0].v2);
	//if (hitLineResult[1].v1 == 1)frontPos.push_back(hitLine[1].v1);
	//else backPos.push_back(hitLine[1].v1);
	//if (hitLineResult[1].v2 == 1)frontPos.push_back(hitLine[1].v2);
	//else backPos.push_back(hitLine[1].v2);


	////表の三角形形成
	//
	//frontPos = Vector3::Sort(frontPos, 0, SortType::ASCENDING);
	//

	////分割ループ
	//while (1) 
	//{
	//	//原点から一番遠い座標
	//	Vector3 farPos = frontPos[frontPos.size() - 1];

	//	//条件を満たす三角形を形成
	//	while (1) 
	//	{
	//		//一番遠い点に1、2番目に近い点(隣の点)を求める
	//		Vector3 firstPos = FLT_MAX, secondPos = FLT_MAX;
	//		float firstDis = FLT_MAX, secondDis = FLT_MAX;
	//		for (int i = 0, size = frontPos.size(); i < size; i++)
	//		{
	//			//自分比較防止
	//			if (farPos == frontPos[i])continue;

	//			float calcDis = (frontPos[i] - farPos).Length();
	//			if (firstPos == FLT_MAX
	//				|| firstDis >= calcDis)
	//			{
	//				secondDis = firstDis;
	//				firstDis = calcDis;

	//				secondPos = firstPos;
	//				firstPos = frontPos[i];

	//			}
	//			else if (secondPos == FLT_MAX
	//				|| secondDis >= calcDis)
	//			{
	//				secondDis = calcDis;
	//				secondPos = frontPos[i];
	//			}
	//		}


	//		//三角形の表裏判定
	//		//far,1,2


	//	}

	//}
#pragma endregion


//スケールだけではなく、回転と平行移動も考慮愛ないといけない
//平行移動は問題ない。回転は、平面を回転させればいい

//頂点に裏表の情報を持たせる?
//シェーダーで分割する?

//シェーダーで分割して、ストリーム出力で、インデックスも受け取れれば順序の問題は解決。
//受け取れそうな気はするけど。そうしないと分割しても扱えないし


//衝突点を求める
//その位置を元に、シェーダーで点を生成。
//ストリームで分割した頂点を出力
//出力した頂点の表裏判定
//2つのバッファに分ける

//分割する三角形かどうか判別しないといけないため、
//結局頂点に情報を追加しないといけない?
//それとも、シェーダーで求められる?

//ジオメトリシェーダーでやる処理をこちらで実装すれば楽に分割できる?

	int z = 0;
}

void ModelObject::SetPosition(const Vector3& position)
{
	for (int i = 0; i < modelFileObjectNum; i++)
	{
		modelConstDatas[i].position = position.ToXMFLOAT3();
	}
}

void ModelObject::SetScale(const Vector3& scale)
{
	for (int i = 0; i < modelFileObjectNum; i++)
	{
		modelConstDatas[i].scale = scale.ToXMFLOAT3();
		if (modelConstDatas[i].scale.x == 0.0f)modelConstDatas[i].scale.x = 0.0001f;
		if (modelConstDatas[i].scale.y == 0.0f)modelConstDatas[i].scale.y = 0.0001f;
		if (modelConstDatas[i].scale.z == 0.0f)modelConstDatas[i].scale.z = 0.0001f;
	}
}

void ModelObject::SetAngle(const Vector3& angle)
{
	for (int i = 0; i < modelFileObjectNum; i++)
	{
		modelConstDatas[i].angle = angle.ToXMFLOAT3();
	}
}


bool ModelObject::Initialize(ID3D12Device* dev, const std::vector<ID3D12GraphicsCommandList*>& cmdList)
{
	device = dev;
	cmdLists = cmdList;


#pragma region ディスクリプタレンジ_ルートパラメーター
	CD3DX12_DESCRIPTOR_RANGE descRangeSRV;
	descRangeSRV.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV, 1, 0);

	CD3DX12_ROOT_PARAMETER rootparam[6] = {};

	//行列や色など
	rootparam[CONST_BUFFER_REGISTER].InitAsConstantBufferView(CONST_BUFFER_REGISTER, 0, D3D12_SHADER_VISIBILITY_ALL);
	//ユーザー定数
	rootparam[USER_BUFFER_REGISTER].InitAsConstantBufferView(USER_BUFFER_REGISTER, 0, D3D12_SHADER_VISIBILITY_ALL);
	//マテリアル
	rootparam[MATERIAL_BUFFER_REGISTER].InitAsConstantBufferView(MATERIAL_BUFFER_REGISTER, 0, D3D12_SHADER_VISIBILITY_PIXEL);
	//PBRマテリアル
	rootparam[COLOR_MATERIAL_BUFFER_REGISTER].InitAsConstantBufferView(COLOR_MATERIAL_BUFFER_REGISTER, 0, D3D12_SHADER_VISIBILITY_PIXEL);
	//モデルごと
	rootparam[MODEL_BUFFER_REGISTER].InitAsConstantBufferView(MODEL_BUFFER_REGISTER, 0, D3D12_SHADER_VISIBILITY_ALL);

	//テクスチャ
	rootparam[TEXURE_ROOTPARAM_NUM].InitAsDescriptorTable(1, &descRangeSRV, D3D12_SHADER_VISIBILITY_PIXEL);

#pragma endregion

#pragma region ルートシグネチャ


	D3D12_ROOT_SIGNATURE_DESC rootSignatureDesc{};
	rootSignatureDesc.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;

	rootSignatureDesc.pParameters = rootparam;
	rootSignatureDesc.NumParameters = _countof(rootparam);


	D3D12_STATIC_SAMPLER_DESC samplerDesc{};
	samplerDesc.AddressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP;
	samplerDesc.AddressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP;
	samplerDesc.AddressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP;
	samplerDesc.BorderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK;
	samplerDesc.Filter = D3D12_FILTER_MIN_MAG_MIP_POINT;
	samplerDesc.MaxLOD = D3D12_FLOAT32_MAX;
	samplerDesc.MinLOD = 0.0f;
	samplerDesc.ComparisonFunc = D3D12_COMPARISON_FUNC_NEVER;
	samplerDesc.ShaderVisibility = D3D12_SHADER_VISIBILITY_PIXEL;
	rootSignatureDesc.pStaticSamplers = &samplerDesc;
	rootSignatureDesc.NumStaticSamplers = 1;

	ComPtr<ID3DBlob>rootSigBlob;
	ComPtr<ID3DBlob>errorBlob;

	auto result = D3D12SerializeRootSignature(
		&rootSignatureDesc,
		D3D_ROOT_SIGNATURE_VERSION_1_0,
		&rootSigBlob, &errorBlob);


	if (FAILED(result))
	{
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());

		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "\n";

		OutputDebugStringA(errstr.c_str());
		exit(1);
	}

	result = device->CreateRootSignature(
		0,
		rootSigBlob->GetBufferPointer(),
		rootSigBlob->GetBufferSize(),
		IID_PPV_ARGS(&rootSignature));

#pragma endregion

	PipelineState::SetModelRootSignature(rootSignature.Get());


	

}

void MelLib::ModelObject::SetMaterial(Material* mtl, const UINT index)
{ 
	if (!mtl)
	{
#ifdef _DEBUG
		OutputDebugString(L"マテリアルのセットに失敗しました。マテリアルがnullptrです。\n");
#endif // _DEBUG
		return;
	}
	if(index >= materials.size())
	{
#ifdef _DEBUG
		OutputDebugString(L"マテリアルのセットに失敗しました。indexの値が大きくてセットできません。\n");
#endif // _DEBUG
		return;
	}

	materials[index] = mtl;
}



bool ModelObject::Create(ModelData* pModelData, ConstBufferData* userConstBufferData, const std::string& name)
{
	if(!pModelData)
	{
#ifdef _DEBUG
		
		OutputDebugStringA(name.data());
		OutputDebugStringW(L"の生成に失敗しました。\n");
#endif // _DEBUG
		return false;
	}

	pModelObjects.emplace(name, std::make_unique<ModelObject>(pModelData, userConstBufferData));
	

	return true;
}

void ModelObject::Delete(const std::string& name)
{
	pModelObjects.erase(name);
}

void ModelObject::ResetAnimation()
{
	fbxAnimationData.currentTime = fbxAnimationData.animationTimes.startTime;
}

void ModelObject::SetCurrentFream(const UINT fream)
{
	FbxTime setTime = fbxAnimationData.animationTimes.startTime * fream;
	if (setTime > fbxAnimationData.animationTimes.endTime)
		setTime = fbxAnimationData.animationTimes.endTime;

	fbxAnimationData.currentTime = setTime;
}



void ModelObject::FbxAnimation()
{
	if (!isAnimation)return;

	//タイムを進める
	fbxAnimationData.currentTime += fbxAnimationData.animationTimes.freamTime * fbxAnimationData.timeMag;

	if (fbxAnimationData.currentTime  > fbxAnimationData.animationTimes.endTime)
		fbxAnimationData.currentTime  = fbxAnimationData.animationTimes.startTime;
	if (fbxAnimationData.currentTime  < fbxAnimationData.animationTimes.startTime)
		fbxAnimationData.currentTime  = fbxAnimationData.animationTimes.endTime;
}

bool ModelObject::Create(ModelData* pModelData, ConstBufferData* userConstBufferData)
{
	if (!pModelData)
	{
#ifdef _DEBUG
		OutputDebugStringW(L"pModelDataがnullptrです。生成に失敗しました\n");
#endif // _DEBUG
		return false;
	}

#pragma region データセット
	if (userConstBufferData)this->userConstBufferData = *userConstBufferData;

	//objのボーンのMoveVectorの割る処理のために、オブジェクトごとにバッファ作成
	if (pModelData->GetModelFormat() == ModelData::ModelFormat::MODEL_FORMAT_OBJ)
	{
		modelConstBufferData.bufferType = ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL_OBJECT;
	}
	else
	{
		modelConstBufferData.bufferType = ConstBufferData::BufferType::BUFFER_TYPE_EACH_MODEL;
	}
	modelConstBufferData.bufferDataSize = sizeof(SkinConstBufferData);

	modelFileObjectNum = pModelData->GetModelFileObjectNumber();
	this->pModelData = pModelData;

#pragma endregion



	CreateConstBuffer();
	
	modelConstDatas.resize(modelFileObjectNum);
	

	//マテリアル取得
	std::vector<ADSAMaterial*>modelDataMtl = pModelData->GetPMaterial();
	size_t size = modelDataMtl.size();
	materials.resize(size);
	for (int i = 0 ; i < size; i++) 
	{
		materials[i] = modelDataMtl[i];
	}

#pragma region アニメーション関係


	boneDatas.resize(pModelData->GetBoneNumber());
	parentBoneDatas.resize(pModelData->GetBoneNumber());
	SkinConstBufferData* skinConstData = nullptr;
	modelConstBuffer[0]->Map(0, nullptr, (void**)&skinConstData);
	for (int i = 0; i < BONE_MAX; i++)
	{
		skinConstData->bones[i] = DirectX::XMMatrixIdentity();
	}
	modelConstBuffer[0]->Unmap(0, nullptr);

	fbxAnimationData.animationTimes = pModelData->GetFbxAnimationTimes();
#pragma endregion

	

	return true;
}



std::vector<std::vector<Vector3>> MelLib::ModelObject::GetVerticesData(const bool scaleImpact, const bool angleImpact, const bool transformImpact)
{
	std::vector<std::vector<Vector3>>verticesPos = pModelData->GetVerticesPosition();

	for (int i = 0, size = verticesPos.size(); i < size; i++)
	{
		for (auto& pos : verticesPos[i])
		{
			Matrix mat = Matrix::GetTranslationMatrix(pos);
			if (scaleImpact) mat *= Matrix::GetScalingMatrix(modelConstDatas[i].scale);
			if (angleImpact)mat *= Matrix::GetRotateZXYMatrix(modelConstDatas[i].angle);
			if (transformImpact)mat *= Matrix::GetTranslationMatrix(modelConstDatas[i].position);
			pos = Vector3(mat[3][0], mat[3][1], mat[3][2]);
		}
	}
	return verticesPos;

}